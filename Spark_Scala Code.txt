import org.apache.spark.sql.SparkSession

import org.apache.spark.sql.types._
import org.apache.spark.sql.functions._
import org.apache.spark.sql.RelationalGroupedDataset
import org.apache.spark.storage.StorageLevel

object UBSPostions {
  def main(args: Array[String]) {
    val spark = SparkSession.builder.appName("UBS").getOrCreate()


    /* Defining Schema for the start position file */
    val StartPosSch = StructType(Array(StructField("instrument",StringType,true),StructField("account",StringType,true),StructField("accountType",StringType,true),StructField("startQuantity",StringType,true)))



    /* Creating DataFrame StartPos out of file Input_StartOfDay_Positions.txt
       Reading all fields as String and casting field startQuantity as long
       Records having null in any field or generated out of type casting are dropped (data cleansing)
    */
    val StartPos = spark.read.format("csv").option("sep",",").option("header",true).schema(StartPosSch).load("hdfs:///user/zubinc8561431/UBS/Input_StartOfDay_Positions.txt").select(col("instrument"),col("account"),col("accountType"),col("startQuantity").cast("long")).drop("any")



    /* Defining Schema for the Transactions file*/
    val inpTransactionsSch = StructType(Array(StructField("TransactionId",IntegerType,true),StructField("Instrument",StringType,true),StructField("TransactionType",StringType,true),StructField("TransactionQuantity",LongType,true)))



    /* Creating DataFrame InputTransactions out of file Input_Transactions. Records having null in any field are dropped (data cleansing)
    */
    val InputTransactions = spark.read.format("json").option("multiline",true).schema(inpTransactionsSch).load("hdfs:///user/zubinc8561431/UBS/Input_Transactions.txt").drop("any")


    /* The next two steps calculates net Buy and Sell transactions that happened for each instrument. They are stored in columns netSellTxnQty and netBuyTxnQty
    */
    val InputTransactionsBuySell = InputTransactions.select(col("TransactionId"),col("Instrument"),col("TransactionType"),col("TransactionQuantity"),when(col("TransactionType") === "S",col("TransactionQuantity")).otherwise(0).as("sellTransactionQuantity"),when(col("TransactionType") === "B",col("TransactionQuantity")).otherwise(0).as("buyTransactionQuantity"))
    val InpTransactionsNetBuySell = InputTransactionsBuySell.groupBy("Instrument").agg(sum("sellTransactionQuantity").as("netSellTxnQty"),sum("buyTransactionQuantity").as("netBuyTxnQty"))


    /* Joining StartPos with InpTransactionsNetBuySell and Selecting the fields that are required further
       Full outer join  is used because:
	   (1) For some instruments we may not have a single transaction in the day. So we have its start position (i.e. a record for that intrument in Input_StartOfDay_Positions.txt) but no transactions (i.e. not a single record for this instrument in Input_Transactions.txt)
	   (2) Some instruments were not owned earlier (i.e. we don't have a record for that intrument in Input_StartOfDay_Positions.txt) but was bought on that day (i.e. we records for this instrument in Input_Transactions.txt)
    */
    val jnStartPosnNetBuySellTxn = StartPos.join(InpTransactionsNetBuySell,trim(StartPos("instrument")) === trim(InpTransactionsNetBuySell("Instrument")),"left_outer").drop(InpTransactionsNetBuySell("Instrument")).selectExpr("instrument","account","accountType","startQuantity","coalesce(netSellTxnQty,0) as netSellTxnQty","coalesce(netBuyTxnQty,0) as netBuyTxnQty")


    /*Calculating End of day positions based on the logic provided
        Persisting DataFrame endOfDayPosn as it will further be used to calculate largest and lowest volume instruments
    */
    val endOfDayPosn = jnStartPosnNetBuySellTxn.select(col("instrument"),col("account"),col("accountType"),col("startQuantity"),when(col("accountType") === "E",col("startQuantity") + col("netBuyTxnQty") - col("netSellTxnQty")).otherwise(col("startQuantity") - col("netBuyTxnQty") + col("netSellTxnQty")).as("endPositionQty")).withColumn("Delta",col("endPositionQty") - col("startQuantity")).drop(col("startQuantity")).persist(StorageLevel.MEMORY_ONLY)


    /*Calculating instruments with lowest net transaction volume for the day*/
    val instrumentLowestVolume = endOfDayPosn.selectExpr("instrument","abs(Delta) as Delta").orderBy(asc_nulls_last("Delta")).limit(1);

    /*Calculating instruments with largest net transaction volume for the day*/
    val instrumentLargestVolume = endOfDayPosn.selectExpr("instrument","abs(Delta) as Delta").orderBy(desc_nulls_last("Delta")).limit(1);


    /*Saving endOfDayPosn Transactions*/
    endOfDayPosn.write.format("csv").option("header",true).option("sep",",").mode("overwrite").save("hdfs:///user/zubinc8561431/UBS/OP_End_Of_Day_Positions")

    /*Saving intrument with lowest transaction volume*/
    instrumentLowestVolume.write.format("csv").option("header",true).option("sep",",").mode("overwrite").save("hdfs:///user/zubinc8561431/UBS/InstrumentLowestVolume")

    /*Saving instrument with largest transaction volume*/
    instrumentLargestVolume.write.format("csv").option("header",true).option("sep",",").mode("overwrite").save("hdfs:///user/zubinc8561431/UBS/InstrumentLargestVolume")

    spark.stop()
  }
}